<!DOCTYPE html>
<html>
  <head>
    <title>ESP32-CAM Remote Viewer</title>
    <meta
      name="viewport"
      content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no"
    />
    <meta name="apple-mobile-web-app-capable" content="yes" />
    <meta
      name="apple-mobile-web-app-status-bar-style"
      content="black-translucent"
    />
    <script src="https://cdnjs.cloudflare.com/ajax/libs/mqtt/4.3.7/mqtt.min.js"></script>
    <style>
      html,
      body {
        height: 100%;
        width: 100%;
        margin: 0;
        padding: 0;
        -webkit-overflow-scrolling: touch;
      }

      #videoContainer {
        position: relative;
        max-width: 100%;
        margin: 0 auto;
        padding: 10px;
        box-sizing: border-box;
      }

      #status {
        position: fixed;
        bottom: 20px;
        left: 0;
        right: 0;
        padding: 10px;
        background: rgba(0, 0, 0, 0.7);
        color: white;
        text-align: center;
        z-index: 1000;
        font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI",
          Roboto, "Helvetica Neue", Arial, sans-serif;
      }

      canvas {
        width: 100%;
        height: auto;
        display: block;
        border: none;
      }

      * {
        -webkit-tap-highlight-color: transparent;
        -webkit-touch-callout: none;
      }

      #detectionResults {
        position: fixed;
        top: 20px;
        left: 20px;
        background: rgba(0, 0, 0, 0.7);
        color: white;
        padding: 10px;
        border-radius: 5px;
        font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI",
          Roboto, "Helvetica Neue", Arial, sans-serif;
        z-index: 1000;
      }

      .detection-box {
        position: absolute;
        border: 3px solid #00ff00;
        pointer-events: none;
        box-shadow: 0 0 5px rgba(0, 255, 0, 0.5);
        z-index: 1000;
      }

      .detection-label {
        position: absolute;
        background: rgba(0, 0, 0, 0.8);
        color: #00ff00;
        padding: 4px 8px;
        font-size: 14px;
        font-weight: bold;
        border-radius: 4px;
        pointer-events: none;
        z-index: 1001;
        white-space: nowrap;
      }
    </style>
  </head>
  <body>
    <div id="videoContainer">
      <canvas id="videoCanvas"></canvas>
      <div id="detectionResults"></div>
      <p id="status">Conectando...</p>
    </div>

    <script>
      const isIOS =
        /iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream;

      const mqttConfig = {
        clientId: "viewer_" + Math.random().toString(16).substr(2, 8),
        protocol: "wss",
        keepalive: isIOS ? 20 : 30,
        connectTimeout: isIOS ? 15000 : 10000,
        reconnectPeriod: 2000,
        clean: true,
        qos: 0,
        rejectUnauthorized: false,
        will: {
          topic: "esp32cam/stream/status",
          payload: "Viewer disconnected",
          qos: 0,
          retain: false,
        },
      };

      function connectMQTT() {
        try {
          return mqtt.connect("wss://test.mosquitto.org:8081", mqttConfig);
        } catch (e) {
          console.error("Error al conectar:", e);
          status.textContent = "Error de conexión. Reintentando...";
          return null;
        }
      }

      let client = connectMQTT();
      const canvas = document.getElementById("videoCanvas");
      const ctx = canvas.getContext("2d");
      const status = document.getElementById("status");

      let currentFrame = [];
      let expectedChunks = 0;
      let receivedChunks = 0;
      let deviceId = null;
      let reconnectAttempts = 0;
      const MAX_RECONNECT_ATTEMPTS = 3;

      let connectionTimeout = setTimeout(
        () => {
          if (!client?.connected) {
            handleConnectionFailure();
          }
        },
        isIOS ? 20000 : 15000
      );

      function handleConnectionFailure() {
        if (reconnectAttempts < MAX_RECONNECT_ATTEMPTS) {
          status.textContent = "Reintentando conexión...";
          reconnectAttempts++;

          if (client) {
            client.end(true);
          }

          setTimeout(() => {
            client = connectMQTT();
            setupEventListeners();
          }, 2000);
        } else {
          status.textContent =
            "No se pudo establecer conexión. Por favor, recarga la página.";
        }
      }

      function setupEventListeners() {
        if (!client) return;

        client.on("connect", () => {
          clearTimeout(connectionTimeout);
          reconnectAttempts = 0;
          console.log("Conectado al broker MQTT");
          status.textContent = "Conectado al broker MQTT, esperando stream...";

          const topics = [
            "esp32cam/stream/#",
            "esp32cam/+/metadata",
            "esp32cam/+/frame/#",
          ];

          topics.forEach((topic) => {
            client.subscribe(topic, { qos: 0 }, (err) => {
              if (err) {
                console.error("Error al suscribirse a " + topic + ":", err);
                status.textContent = "Error al suscribirse: " + err.message;
              }
            });
          });
        });

        client.on("close", () => {
          console.log("Desconectado del broker MQTT");
          status.textContent = "Desconectado del broker MQTT. Reconectando...";
        });

        client.on("message", async (topic, message) => {
          console.log(`Mensaje en ${topic} (${message.length} bytes)`);

          try {
            if (topic.endsWith("/metadata")) {
              const metadata = JSON.parse(message.toString());
              console.log("Metadata recibida:", metadata);
              deviceId = metadata.deviceId;
              expectedChunks = metadata.chunks;
              currentFrame = new Array(expectedChunks).fill(null);
              receivedChunks = 0;
              status.textContent = `Recibiendo frame (0/${expectedChunks} chunks)`;
            } else if (topic.includes("/frame/")) {
              const frameIndex = parseInt(topic.split("/").pop());
              currentFrame[frameIndex] = message;
              receivedChunks++;
              status.textContent = `Recibiendo frame (${receivedChunks}/${expectedChunks} chunks)`;

              if (receivedChunks === expectedChunks) {
                try {
                  const fullFrame = new Uint8Array(
                    currentFrame.reduce((acc, chunk) => acc + chunk.length, 0)
                  );
                  let offset = 0;
                  currentFrame.forEach((chunk) => {
                    if (chunk) {
                      fullFrame.set(chunk, offset);
                      offset += chunk.length;
                    }
                  });

                  const blob = new Blob([fullFrame], { type: "image/jpeg" });

                  const detectionResult = await detectObjects(blob);
                  if (detectionResult && detectionResult.status === "success") {
                    document.querySelector("#videoContainer").__lastDetections =
                      detectionResult.detections;
                    drawDetections(detectionResult.detections);
                  }

                  const url = URL.createObjectURL(blob);
                  const img = new Image();
                  img.onload = () => {
                    canvas.width = img.width;
                    canvas.height = img.height;
                    ctx.drawImage(img, 0, 0);
                    URL.revokeObjectURL(url);
                    status.textContent = "Frame procesado correctamente";
                  };
                  img.onerror = (err) => {
                    console.error("Error al cargar la imagen:", err);
                    status.textContent = "Error al mostrar el frame";
                  };
                  img.src = url;
                } catch (err) {
                  console.error("Error procesando frame:", err);
                }
              }
            }
          } catch (error) {
            console.error("Error procesando mensaje:", error);
          }
        });

        client.on("error", (error) => {
          console.error("Error MQTT:", error);
          status.textContent = `Error de conexión: ${error.message}. Reintentando...`;
          setTimeout(() => {
            if (!client.connected) {
              location.reload();
            }
          }, 5000);
        });

        client.on("offline", () => {
          console.log("Conexión perdida, intentando reconectar...");
          status.textContent = "Conexión perdida. Reconectando...";
        });

        client.on("reconnect", () => {
          console.log("Intentando reconexión MQTT...");
          status.textContent = "Reconectando al servidor...";
        });
      }

      async function detectObjects(imageBlob) {
        const formData = new FormData();

        try {
          const img = new Image();
          img.src = URL.createObjectURL(imageBlob);
          await new Promise((resolve) => (img.onload = resolve));

          const canvas = document.createElement("canvas");
          const MAX_SIZE = 800; // Maximum dimension

          let width = img.width;
          let height = img.height;

          // Scale down if image is too large
          if (width > MAX_SIZE || height > MAX_SIZE) {
            if (width > height) {
              height = (height * MAX_SIZE) / width;
              width = MAX_SIZE;
            } else {
              width = (width * MAX_SIZE) / height;
              height = MAX_SIZE;
            }
          }

          canvas.width = width;
          canvas.height = height;

          const ctx = canvas.getContext("2d");
          ctx.drawImage(img, 0, 0, width, height);

          canvas.toBlob(
            (blob) => {
              formData.append("image", blob);
            },
            "image/jpeg",
            0.9
          );

          URL.revokeObjectURL(img.src);
        } catch (error) {
          console.error("Error resizing image:", error);
          formData.append("image", imageBlob); // Fall back to original image
        }

        try {
          const response = await fetch(
            "http://concrete-monkey-selected.ngrok-free.app/detect",
            {
              method: "POST",
              body: formData,
            }
          );

          if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
          }

          const result = await response.json();
          console.log("Detection result:", result); // Debug log
          return result;
        } catch (error) {
          console.error("Error en la detección:", error);
          return null;
        }
      }

      function drawDetections(detections) {
        const container = document.getElementById("videoContainer");
        const canvas = document.getElementById("videoCanvas");

        // Remove previous detection boxes
        const oldBoxes = container.getElementsByClassName("detection-box");
        const oldLabels = container.getElementsByClassName("detection-label");
        while (oldBoxes.length > 0) oldBoxes[0].remove();
        while (oldLabels.length > 0) oldLabels[0].remove();

        // Get the actual dimensions of the displayed image
        const rect = canvas.getBoundingClientRect();
        const scaleX = rect.width / canvas.width;
        const scaleY = rect.height / canvas.height;

        // Draw new detection boxes
        detections.forEach((detection) => {
          const [x1, y1, x2, y2] = detection.bbox;
          const confidence = Math.round(detection.confidence * 100);

          // Scale coordinates to match displayed image size
          const scaledX1 = x1 * scaleX;
          const scaledY1 = y1 * scaleY;
          const scaledX2 = x2 * scaleX;
          const scaledY2 = y2 * scaleY;

          // Create box
          const box = document.createElement("div");
          box.className = "detection-box";
          box.style.left = `${rect.left + scaledX1}px`;
          box.style.top = `${rect.top + scaledY1}px`;
          box.style.width = `${scaledX2 - scaledX1}px`;
          box.style.height = `${scaledY2 - scaledY1}px`;

          // Create label
          const label = document.createElement("div");
          label.className = "detection-label";
          label.style.left = `${rect.left + scaledX1}px`;
          label.style.top = `${rect.top + scaledY1 - 20}px`;
          label.textContent = `${detection.class} ${confidence}%`;

          container.appendChild(box);
          container.appendChild(label);
        });
      }

      setupEventListeners();

      document.addEventListener("visibilitychange", () => {
        if (document.hidden) {
          if (client?.connected) {
            client.end();
          }
        } else {
          client = connectMQTT();
          setupEventListeners();
        }
      });

      document.addEventListener("gesturestart", (e) => {
        e.preventDefault();
      });

      // Add window resize handler to update bounding boxes
      let resizeTimeout;
      window.addEventListener("resize", () => {
        clearTimeout(resizeTimeout);
        resizeTimeout = setTimeout(() => {
          const lastDetections =
            document.querySelector("#videoContainer").__lastDetections;
          if (lastDetections) {
            drawDetections(lastDetections);
          }
        }, 250);
      });
    </script>
  </body>
</html>
